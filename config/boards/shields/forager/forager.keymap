#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE    0
#define QWERTY  1
#define NAV     2
#define NUM     3
#define SYM     4
#define ADJ     5

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro
#define MEH LS(LC(LALT))

/ {
    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        sabk: shift_to_alt_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LA(BSPC)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        sym_bspc: left_thumb_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&sabk>;
        };
        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
        };
        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
            &kp Q           &kp W           &kp F           &kp P           &kp B                                           &kp J           &kp L           &kp U           &kp Y           AS(SEMI)
            &kp A           &lhm LCTRL R    &lhm LALT S     &lhm LGUI T     &lhm LSHIFT G                                   &rhm RSHIFT M   &rhm RGUI N     &rhm RALT E     &rhm RCTRL I    &kp O
            &kp Z           &kp X           &kp C           &kp D           &kp V                                           &kp K           &kp H           AS(COMMA)       AS(DOT)         AS(FSLH)
                                                                            &lt NAV LGUI    &lt NUM SPACE   &sym_bspc 2 0   &lt NAV RGUI
            >;
        };

        qwerty {
            bindings = <
            &kp Q           &kp W           &kp E           &kp R           &kp T                                           &kp Y           &kp U           &kp I           &kp O           &kp P
            &kp A           &lhm LCTRL S    &lhm LALT D     &lhm LGUI F     &lhm LSHIFT G                                   &rhm RSHIFT H   &rhm LGUI J     &rhm LALT K     &rhm LCTRL L    AS(SEMI)
            &kp Z           &kp X           &kp C           &kp V           &kp B                                           &kp N           &kp M           AS(COMMA)       AS(DOT)         AS(FSLH)
                                                                            &lt NAV LGUI    &lt NUM SPACE   &sym_bspc 2 0   &lt NAV RGUI
            >;
        };

        nav {
            bindings = <
            &trans          &trans          &kp UP_ARROW    &trans          &trans                                          &trans          &trans          &trans          &trans          &trans
            &trans          &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW &kp ENTER                                       &kp ENTER       &trans          &trans          &trans          &trans
            &trans          &trans          &trans          &trans          &trans                                          &trans          &trans          &trans          &trans          &trans
                                                                            &trans         &trans          &trans           &trans
            >;
        };

        num {
            bindings = <
            AS(N1)          AS(N2)          AS(N3)          AS(N4)          AS(N5)                                          AS(N6)          AS(N7)          AS(N8)          AS(N9)          AS(N0)
            &trans          &trans          &trans          &trans          &trans                                          &trans          &trans          &trans          &trans          &trans
            &trans          &trans          &trans          &trans          &trans                                          &trans          &trans          &trans          &trans          &trans
                                                                            &mo SYM        &trans          &kp RSHIFT       &trans
            >;
        };

        sym {
            bindings = <
            &kp GRAVE       &kp LT          &kp GT          &kp MINUS       &kp PIPE                                        &kp CARET       &kp LBRC        &kp RBRC        &kp DLLR        &kp BSLH
            &kp EXCL        &kp ASTRK       &kp FSLH        &kp EQUAL       &kp AMPS                                        &kp HASH        &kp LPAR        &kp RPAR        &kp SEMI        &kp DQT
            &kp TILDE       &kp PLUS        &kp LBKT        &kp RBKT        &kp PRCNT                                       &kp AT          &kp COLON       &kp UNDS        &kp QMARK       &kp APOS
                                                                            &trans          &kp LSHIFT      &trans          &mo NUM
            >;
        };

        adj {
            bindings = <
            &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_CLR_ALL                                  &kp C_SLEEP     &trans          &trans          &kp C_BRI_DN    &kp C_BRI_UP
            &studio_unlock  &trans          &trans          &trans          &to BASE                                        &to QWERTY      &trans          &trans          &kp C_VOL_DN    &kp C_VOL_UP
            &bootloader     &trans          &trans          &trans          &trans                                          &trans          &trans          &trans          &trans          &bootloader
                                                                            &trans          &trans          &trans          &trans
            >;
        };

    };
};

&lt {
    // require-prior-idle-ms = <100>;
    tapping-term-ms = <250>;
    quick-tap-ms = <200>;
};

&mt {
    quick-tap-ms = <200>;
};

&sk {
    release-after-ms = <500>;
    quick-release;
};
